<apex:page
    controller="VFRemotingController"
    docType="html-5.0"
    lightningStylesheets="true"
>
    <!-- 
        TODO: 
            - Break into two VF components, one for publish, one for subscribe
            - Encapsulate logic of each into the component. They share a message channel, so...
            - Investigate ways to make them reusable? Is that necessary? If so, maybe pass the message channel handle to each component
    -->
    <ul class="accounts"> </ul>
    <div>
        <p>Subscribe to Message Channel </p>
        <button onclick="subscribeMC()">Subscribe</button>
        <p>Unsubscribe from subscription</p>
        <button onclick="unsubscribeMC()">Unsubscribe</button>
        <br />
        <br />
        <p>Received message:</p>
        <ul class="contacts"></ul>
        <!-- <textarea
            id="MCMessageTextArea"
            rows="10"
            style="disabled:true;resize:none;width:100%;"
        /> -->
    </div>

    <!-- prettier-ignore -->
    <script type="text/javascript">
        // Load the MessageChannel token in a variable 
        var SAMPLEMC = "{!$MessageChannel.recordSelected__c}"; 
        
        // Get a handle to remote functions we will need 
        var {getAccountsWithContacts, getContactsByAccountId} = VFRemotingController; 
        
        let subscriptionToMC;
        
        function onMCPublished(message) { 
            var ul = document.querySelector(".contacts"); 
            console.log('vf page got message with record Id: ' + message.recordId);

            getContactsByAccountId(message.recordId, (result, event) => { 
                var contactList = result
                                        .map( item => constructListItem(item))
                                        .join('');
                ul.innerHTML = contactList; 
                //textArea.innerHTML = message ? JSON.stringify(result, null, '\t') : 'no message payload'; 
            }) ; 
        }

        function subscribeMC() { 
            if (!subscriptionToMC) { 
                subscriptionToMC = sforce.one.subscribe(SAMPLEMC, onMCPublished, {scope: "APPLICATION"}); 
                console.log(subscriptionToMC);
            }
        } 
        
        function unsubscribeMC() { 
            if (subscriptionToMC) {
                sforce.one.unsubscribe(subscriptionToMC); 
                subscriptionToMC = null; 
            } 
        }
        
        function handleSelectAccount(event){ 
            var payload = { recordId: event.target.dataset.id }; 
            sforce.one.publish(SAMPLEMC, payload); 
        }
        
        function constructListItem(item){ 
            return `<li data-id="${item.Id}">${item.Name}, (${item.Id})</li>`; 
        } 
        // Init Accounts list 
        getAccountsWithContacts((result, event) => { 
            var ul = document.querySelector('.accounts'); 
            
            if (result) { 
                var acctList = result 
                                    .map(item => constructListItem(item)) 
                                    .join(''); 
                ul.innerHTML = acctList; 
                var listItems = ul.querySelectorAll('li');
                listItems.forEach(item => {
                    item.addEventListener('click', handleSelectAccount); 
                });
            } 
        });
    </script>
</apex:page>
